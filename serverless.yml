service: aws-cognito-api-gateway-dynamodb

custom:
  stage: 'dev'
  region: 'us-east-1'
  gamesTableName: 'games-table-${sls:stage}'
  myGSI: 'myGSI'

provider:
  name: aws
  runtime: nodejs16.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem            
          Resource:
            - Fn::GetAtt: [ GamesTable, Arn ]
        - Effect: Allow
          Action:
            - dynamodb:PartiQLSelect
          Resource:
            - 'arn:aws:dynamodb:${self:custom.region}:*:table/${self:custom.gamesTableName}/index/*'
        - Effect: Allow
          Action:
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminSetUserPassword
          Resource: "*"
  stage: ${self:custom.stage}
  region: ${self:custom.region}
  environment:
    user_pool_id: { Ref: UserPool }
    client_id: { Ref: UserClient }
    stage: ${self:custom.stage}
    region: ${self:custom.region}
    games_table_name: ${self:custom.gamesTableName}
    my_gsi: ${self:custom.myGSI}

functions:
  loginUser:
    handler: modules/user/login.handler
    events:
      - http:
          path: user/login
          method: post
          cors: true

  signupUser:
    handler: modules/user/signup.handler
    events:
      - http:
          path: user/signup
          method: post
          cors: true

  privateAPI:
    handler: modules/user/private.handler
    events:
      - http:
          path: user/private
          method: post
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email

  gamesGetAPI:
    handler: modules/games/handlers.get
    events:
      - http:
          path: games
          method: get
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email

  gamesPostAPI:
    handler: modules/games/handlers.update
    events:
      - http:
          path: games
          method: post
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email

  gamesDeleteAPI:
    handler: modules/games/handlers.remove
    events:
      - http:
          path: games
          method: delete
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email

resources:
  Resources:
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: serverless-auth-pool
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes: ["email"]

    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: user-pool-ui
        GenerateSecret: false
        UserPoolId: { Ref: UserPool }
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"

    GamesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: game_id
            AttributeType: S
          - AttributeName: email
            AttributeType: S          
        KeySchema:
          - AttributeName: game_id
            KeyType: HASH
          - AttributeName: email
            KeyType: RANGE    
        GlobalSecondaryIndexes:
          - IndexName: ${self:custom.myGSI}
            KeySchema:
            - AttributeName: game_id
              KeyType: HASH
            Projection:
              ProjectionType: ALL      
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.gamesTableName}